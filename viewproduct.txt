import React, { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import { Typography, Card, CardContent } from "@mui/material";

export const ViewProduct = () => {
  const location = useLocation();
  const [product, setProduct] = useState({});
  const { uid, pid } = location.state;

  useEffect(() => {
    const fetchProduct = async () => {
      const response = await fetch(
        `https://localhost:7199/api/Product/Get Grouped Product/${pid}`
      );
      if (response.ok) {
        const data = await response.json();
        setProduct(data);
        console.log(data);
      }
    };
    fetchProduct();
  }, [uid, pid]);

  return (
    <div style={{ padding: 50 }}>
      <Typography variant="h5">{product.brandName}</Typography>
      <Typography variant="subtitle1">{product.description}</Typography>
      <Typography variant="subtitle2">Category: {product.category}</Typography>
      <Typography variant="subtitle2">Subcategory: {product.subCategory}</Typography>
      <Typography variant="subtitle2">Color: {product.color}</Typography>
      {product.productDetails && product.productDetails.map((detail, index) => (
        <Card key={index} style={{ marginTop: 20 }}>
          <CardContent>
            <Typography variant="h6">Size: {detail.productSize}</Typography>
            <Typography variant="subtitle1">Price: ${detail.price}</Typography>
            <Typography variant="subtitle1">Stock: {detail.stock}</Typography>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};



//another version
import React, { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import { Card, CardContent, Typography, Grid, Badge } from "@mui/material";

const ProductDetails = ({ productDetails, onSizeSelect }) => {
  const [selectedSize, setSelectedSize] = useState(null);

  const handleSizeSelect = (size) => {
    setSelectedSize(size);
    onSizeSelect(size);
  };

  return (
    <Grid container spacing={2}>
      {productDetails.map((detail) => (
        <Grid item key={detail.id} xs={12} sm={6} md={4} lg={3}>
          <Card>
            <CardContent>
              <Typography variant="h6">{detail.productSize}</Typography>
              <Typography variant="body1">Price: ${detail.price}</Typography>
              <Typography variant="body1">Stock: {detail.stock}</Typography>
              <Badge
                color="primary"
                badgeContent={detail.stock}
                onClick={() => handleSizeSelect(detail.productSize)}
                style={{ cursor: "pointer", marginTop: 10 }}
              >
                Select Size
              </Badge>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export const ViewProduct = () => {
  const location = useLocation();
  const [product, setProduct] = useState({});
  const [selectedPrice, setSelectedPrice] = useState(null);
  const { uid, pid } = location.state;

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        const response = await fetch(
          `https://localhost:7199/api/Product/Get Grouped Product/${pid}`
        );

        if (response.ok) {
          const data = await response.json();
          setProduct(data);
        }
      } catch (error) {
        console.error("Error fetching product:", error);
      }
    };

    fetchProduct();
  }, [uid, pid]);

  const handleSizeSelect = (size) => {
    const selectedDetail = product.productDetails.find(detail => detail.productSize === size);
    setSelectedPrice(selectedDetail.price);
  };

  return (
    <div style={{ padding: 80 }}>
      <img src={product.image} alt={product.brandName} style={{ maxWidth: "100%" }} />
      <Typography variant="h4">{product.brandName}</Typography>
      <Typography variant="body1">{product.description}</Typography>
      <Typography variant="body1">Color: {product.color}</Typography>
      {Array.isArray(product.productDetails) && product.productDetails.length > 0 ? (
        <ProductDetails productDetails={product.productDetails} onSizeSelect={handleSizeSelect} />
      ) : (
        <Typography variant="body1">Product details not available</Typography>
      )}
      {selectedPrice && <Typography variant="body1">Price: ${selectedPrice}</Typography>}
    </div>
  );
};
